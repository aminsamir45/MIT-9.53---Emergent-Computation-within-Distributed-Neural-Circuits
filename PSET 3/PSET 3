{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aminsamir45/MIT-9.53---Emergent-Computation-within-Distributed-Neural-Circuits/blob/main/PSET%203/PSET%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b38LNLNu2Dkb"
      },
      "source": [
        "## 9.53 PSET 3\n",
        "\n",
        "Samir Amin"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4q8L4RG_17Qs",
        "outputId": "3f4fbe33-d1ef-43dc-b7a7-db77a223a1d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "# First import libraries needed to solve the problem\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.io import loadmat\n",
        "from scipy import stats\n",
        "import math\n",
        "import pandas as pd\n",
        "import random\n",
        "import tensorflow as tf\n",
        "import scipy.io\n",
        "from google.colab import drive\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.optimizers import SGD\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from keras.optimizers import SGD\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v80Yh-S22M0p"
      },
      "source": [
        "# Problem 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "JfByi_cr2TUm",
        "outputId": "7cb8fc1d-b46d-4e6b-9b59-30aa5fcfb0f5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Load the data\n",
        "training = loadmat('/content/drive/MyDrive/Colab Notebooks/9.53/PSET 3/mnist_training.mat')\n",
        "testing = loadmat('/content/drive/MyDrive/Colab Notebooks/9.53/PSET 3/mnist_test.mat')\n",
        "\n",
        "# mess around with data\n",
        "# Extract the images and labels\n",
        "images = training['X_train']\n",
        "labels = training['y_train']\n",
        "\n",
        "# Plot the first 20 images\n",
        "fig, axs = plt.subplots(4, 5, figsize=(10, 8))\n",
        "for i in range(20):\n",
        "    ax = axs[i // 5, i % 5]\n",
        "    ax.imshow(images[i].reshape((28, 28)), cmap='gray')\n",
        "    ax.axis('off')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kS050UqC5iJy",
        "outputId": "5b8c9b48-f0eb-4902-a4f7-368871899682"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(784,)\n",
            "(28, 28)\n"
          ]
        }
      ],
      "source": [
        "# Reshape the vector into a matrix\n",
        "image_reshape = training['X_train'][0].reshape((28, 28))\n",
        "print(images[0].shape)\n",
        "print(image_reshape.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JwvbMEmM7eta"
      },
      "source": [
        "##1.1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7hn8U0od7lrn"
      },
      "source": [
        "Weights from input to hidden layer: $w_{i,j}$, where $i$ denotes the input node index and $j$ denotes the hidden node index. \\\n",
        "Weights from hidden to output layer: $v_{j,k}$, where $j$ denotes the hidden node index and $k$ denotes the output node index. \\\n",
        "Biases for the hidden layer: $b_j$, where $j$ denotes the hidden node index. \\\n",
        "Biases for the output layer: $c_k$, where $k$ denotes the output node index. \\\n",
        "Activation of the input node $i$: $x_i$ \\\n",
        "Activation of the hidden node $j$: $z_j$ \\\n",
        "Activation of the output node $k$: $y_k$ \\\n",
        "Learning rate: $\\eta$ \\\n",
        "Error of the network on the nth training example: $E_n$ \\\n",
        "\n",
        "Link to Derivations - https://drive.google.com/drive/folders/11rgZ1UaWx5wFpZ4ZFtKBfQI_AeodB7AA\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o7Kd82Fen2D8"
      },
      "source": [
        "## 1.2 and 1.3\n",
        "Creating the Network using SGD\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "SBb55T_DGQGb"
      },
      "outputs": [],
      "source": [
        "# training data\n",
        "X_train = training['X_train']\n",
        "y_train = training['y_train']\n",
        "# testing data\n",
        "X_test = testing['X_test']\n",
        "y_test = testing['y_test']\n",
        "# class mapping for one-hot coding\n",
        "class_map = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9}\n",
        "# Convert to one-hot encoding\n",
        "y_train = np.vectorize(class_map.get)(y_train, 0)\n",
        "y_test = np.vectorize(class_map.get)(y_test, 0)\n",
        "num_classes = 10\n",
        "# One-hot encode labels\n",
        "y_train = np.eye(num_classes)[y_train.reshape(-1)]\n",
        "y_test = np.eye(num_classes)[y_test.reshape(-1)]\n",
        "# Add Bias term\n",
        "bias_term = np.ones((3000, 1))\n",
        "X_train = np.hstack((bias_term, X_train))\n",
        "X_test = np.hstack((bias_term, X_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "XfHNeoK5wLVg"
      },
      "outputs": [],
      "source": [
        "class Network:\n",
        "\n",
        "  def __init__(self, layers):\n",
        "    self.layers = layers\n",
        "    self.loss = MSE()\n",
        "\n",
        "  def fit(self, train_x, train_y, iters, lr):\n",
        "    for it in range(iters):\n",
        "      self._train_step(train_x, train_y, lr)\n",
        "\n",
        "      if it % (iters // 20) == 0:\n",
        "        self._print_metrics(train_x, train_y, it)\n",
        "\n",
        "  def _train_step(self, train_x, train_y, lr):\n",
        "    idx = np.random.randint(train_x.shape[0])\n",
        "    x, y = train_x[idx:idx + 1, :], train_y[idx: idx + 1, :]\n",
        "\n",
        "    y_pred = self.forward(x)\n",
        "    loss = self.loss.forward(y_pred, y).sum()\n",
        "    self.backward()\n",
        "\n",
        "    for layer in self.layers:\n",
        "      layer.update(lr)\n",
        "\n",
        "  def _print_metrics(self, train_x, train_y, it):\n",
        "    y_pred = self.forward(train_x)\n",
        "    loss = self.loss.forward(y_pred, train_y).sum()\n",
        "    acc = (y_pred.argmax(axis=1) == train_y.argmax(axis=1)).mean()\n",
        "    print(f\"Epoch {it}: loss = {loss} | acc = {acc}\")\n",
        "\n",
        "  def forward(self, x):\n",
        "    out = x\n",
        "    for layer in self.layers:\n",
        "      out = layer(out)\n",
        "    return out\n",
        "    \n",
        "  def backward(self):\n",
        "    grad = self.loss.backward()\n",
        "    for layer in reversed(self.layers):\n",
        "      grad = layer.backward(grad)\n",
        "\n",
        "class Dense:\n",
        "\n",
        "  def __init__(self, in_dim: int, out_dim: int, init=\"uniform\"):\n",
        "    self.w = np.random.randn(in_dim, out_dim) if init == \"uniform\" else np.random.normal(0, 1, (in_dim, out_dim))\n",
        "    self.b = np.zeros(out_dim)\n",
        "\n",
        "  def __call__(self, x):\n",
        "    self.input = x\n",
        "    return self.input @ self.w + self.b\n",
        "\n",
        "  def backward(self, grad):\n",
        "    self.w_grad = self.input.T @ grad\n",
        "    self.b_grad = grad.sum(axis=0)\n",
        "    return grad @ self.w.T\n",
        "\n",
        "  def update(self, lr):\n",
        "    self.w -= lr * self.w_grad\n",
        "    self.b -= lr * self.b_grad\n",
        "\n",
        "class Sigmoid:\n",
        "\n",
        "  def __call__(self, x):\n",
        "    self.out = 1 / (1 + np.exp(-x))\n",
        "    return self.out\n",
        "\n",
        "  def backward(self, grad):\n",
        "    return self.out * (1 - self.out) * grad\n",
        "\n",
        "  def update(self, *args, **kwargs):\n",
        "    pass\n",
        "\n",
        "class MSE:\n",
        "\n",
        "  def __init__(self):\n",
        "    self.y_pred = None\n",
        "    self.y_true = None\n",
        "\n",
        "  def forward(self, y_pred, y_true):\n",
        "    self.y_pred = y_pred\n",
        "    self.y_true = y_true\n",
        "    self.out = np.mean((y_pred - y_true) ** 2)\n",
        "    return self.out\n",
        "\n",
        "  def backward(self):\n",
        "    return 2 * (self.y_pred - self.y_true) / self.y_true.size\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "o17agh-TVMDx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "365e73f9-f807-4e15-c3b6-e5f310ea0e81"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0: loss = 0.45473841942464716 | acc = 0.07966666666666666\n",
            "Epoch 50000: loss = 0.051875522470538886 | acc = 0.6236666666666667\n",
            "Epoch 100000: loss = 0.03670158165014824 | acc = 0.7496666666666667\n",
            "Epoch 150000: loss = 0.02848905189136043 | acc = 0.8283333333333334\n",
            "Epoch 200000: loss = 0.020306231194114087 | acc = 0.883\n",
            "Epoch 250000: loss = 0.01675173465517269 | acc = 0.9036666666666666\n",
            "Epoch 300000: loss = 0.014332628350759866 | acc = 0.9216666666666666\n",
            "Epoch 350000: loss = 0.01251811352135505 | acc = 0.9313333333333333\n",
            "Epoch 400000: loss = 0.011159561857869744 | acc = 0.9386666666666666\n",
            "Epoch 450000: loss = 0.01012751939300085 | acc = 0.9446666666666667\n",
            "Epoch 500000: loss = 0.009235829730746213 | acc = 0.948\n",
            "Epoch 550000: loss = 0.008449976436011286 | acc = 0.954\n",
            "Epoch 600000: loss = 0.007800153564872587 | acc = 0.9563333333333334\n",
            "Epoch 650000: loss = 0.007233551855484946 | acc = 0.9593333333333334\n",
            "Epoch 700000: loss = 0.006775362849888626 | acc = 0.9616666666666667\n",
            "Epoch 750000: loss = 0.0063420258629530175 | acc = 0.965\n",
            "Epoch 800000: loss = 0.006009507304331311 | acc = 0.9653333333333334\n",
            "Epoch 850000: loss = 0.005700642921188108 | acc = 0.967\n",
            "Epoch 900000: loss = 0.0054843422591037295 | acc = 0.9663333333333334\n",
            "Epoch 950000: loss = 0.005292282209397274 | acc = 0.967\n"
          ]
        }
      ],
      "source": [
        "# Create network and train\n",
        "nn = Network(layers=[Dense(785, 25), Sigmoid(), Dense(25, 10), Sigmoid()])\n",
        "\n",
        "nn.fit(X_train, y_train, iters=1000000, lr=0.1)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Testing the Network"
      ],
      "metadata": {
        "id": "eR2cZPam-NfJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_accuracy(model, X, y):\n",
        "  predictions = model.forward(X)\n",
        "  accuracy = (predictions.argmax(axis=1) == y.argmax(axis=1)).mean()\n",
        "  return accuracy\n",
        "\n",
        "test_accuracy = compute_accuracy(nn, X_test, y_test)\n",
        "print(f\"Testing Data Accuracy: {test_accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wfUneT1_-Ms2",
        "outputId": "f03b262e-1b34-45e7-d6f2-ec63ae514846"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Testing Data Accuracy: 0.838\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Run the network on different initialized seeds"
      ],
      "metadata": {
        "id": "38ZzJ7DL-ape"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def seeds():\n",
        "  nn = Network(layers=[\n",
        "    Dense(785, 25),\n",
        "    Sigmoid(),\n",
        "    Dense(25, 10),\n",
        "    Sigmoid()\n",
        "    ])\n",
        "  \n",
        "  nn.fit(X_train, y_train, iters=1000000, lr=0.1)\n",
        "  return compute_accuracy(nn, X_test, y_test)\n",
        "\n",
        "seed = []\n",
        "for i in range(1, 31):\n",
        "  print(f'Seed Number {i}')\n",
        "  seed.append(seeds())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "M8A3CVoT-gbN",
        "outputId": "9c2b3d4f-ee6e-4b24-87d2-c2033d3bc21f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seed Number 1\n",
            "Epoch 0: loss = 0.4340178517876798 | acc = 0.08766666666666667\n",
            "Epoch 50000: loss = 0.0643588099572592 | acc = 0.5066666666666667\n",
            "Epoch 100000: loss = 0.03687726895336159 | acc = 0.7476666666666667\n",
            "Epoch 150000: loss = 0.029794513671950972 | acc = 0.7936666666666666\n",
            "Epoch 200000: loss = 0.024013521568645148 | acc = 0.8546666666666667\n",
            "Epoch 250000: loss = 0.01851169928560339 | acc = 0.8953333333333333\n",
            "Epoch 300000: loss = 0.016084345705705373 | acc = 0.9133333333333333\n",
            "Epoch 350000: loss = 0.014160794090484959 | acc = 0.9233333333333333\n",
            "Epoch 400000: loss = 0.012734273905520439 | acc = 0.9296666666666666\n",
            "Epoch 450000: loss = 0.011520249719121634 | acc = 0.934\n",
            "Epoch 500000: loss = 0.010570783506162392 | acc = 0.9403333333333334\n",
            "Epoch 550000: loss = 0.009780648212485223 | acc = 0.945\n",
            "Epoch 600000: loss = 0.009123227599113742 | acc = 0.947\n",
            "Epoch 650000: loss = 0.008560336866703216 | acc = 0.95\n",
            "Epoch 700000: loss = 0.008003100495326971 | acc = 0.953\n",
            "Epoch 750000: loss = 0.007568824540389238 | acc = 0.9546666666666667\n",
            "Epoch 800000: loss = 0.0071975631275860525 | acc = 0.957\n",
            "Epoch 850000: loss = 0.006835962417521073 | acc = 0.9586666666666667\n",
            "Epoch 900000: loss = 0.0065588384259799995 | acc = 0.96\n",
            "Epoch 950000: loss = 0.0063010259478954835 | acc = 0.9603333333333334\n",
            "Seed Number 2\n",
            "Epoch 0: loss = 0.3037589602621748 | acc = 0.12966666666666668\n",
            "Epoch 50000: loss = 0.05457250477849153 | acc = 0.5943333333333334\n",
            "Epoch 100000: loss = 0.040795833273555966 | acc = 0.7203333333333334\n",
            "Epoch 150000: loss = 0.03253749978159501 | acc = 0.778\n",
            "Epoch 200000: loss = 0.020490376577407283 | acc = 0.885\n",
            "Epoch 250000: loss = 0.017172166035263895 | acc = 0.908\n",
            "Epoch 300000: loss = 0.015044023508543392 | acc = 0.9203333333333333\n",
            "Epoch 350000: loss = 0.013322044354386369 | acc = 0.9283333333333333\n",
            "Epoch 400000: loss = 0.012063569707200267 | acc = 0.9336666666666666\n",
            "Epoch 450000: loss = 0.010993691647638346 | acc = 0.9396666666666667\n",
            "Epoch 500000: loss = 0.010167039888497986 | acc = 0.9443333333333334\n",
            "Epoch 550000: loss = 0.009445400238101309 | acc = 0.947\n",
            "Epoch 600000: loss = 0.008835832461224019 | acc = 0.9496666666666667\n",
            "Epoch 650000: loss = 0.008265504348503615 | acc = 0.953\n",
            "Epoch 700000: loss = 0.007731273033378355 | acc = 0.9553333333333334\n",
            "Epoch 750000: loss = 0.007291241614801238 | acc = 0.9576666666666667\n",
            "Epoch 800000: loss = 0.006910065618343538 | acc = 0.9593333333333334\n",
            "Epoch 850000: loss = 0.006570859103954543 | acc = 0.9606666666666667\n",
            "Epoch 900000: loss = 0.006258820833660644 | acc = 0.9616666666666667\n",
            "Epoch 950000: loss = 0.006000322002180485 | acc = 0.963\n",
            "Seed Number 3\n",
            "Epoch 0: loss = 0.27784383848896627 | acc = 0.10066666666666667\n",
            "Epoch 50000: loss = 0.04915583909179568 | acc = 0.6606666666666666\n",
            "Epoch 100000: loss = 0.030907088676495748 | acc = 0.8063333333333333\n",
            "Epoch 150000: loss = 0.023090733094542668 | acc = 0.8646666666666667\n",
            "Epoch 200000: loss = 0.018692994439822044 | acc = 0.8953333333333333\n",
            "Epoch 250000: loss = 0.015678728160849687 | acc = 0.9146666666666666\n",
            "Epoch 300000: loss = 0.013605364959926067 | acc = 0.924\n",
            "Epoch 350000: loss = 0.01194154022891494 | acc = 0.9343333333333333\n",
            "Epoch 400000: loss = 0.010658945005374058 | acc = 0.9406666666666667\n",
            "Epoch 450000: loss = 0.009671201207104348 | acc = 0.9453333333333334\n",
            "Epoch 500000: loss = 0.008932486415937428 | acc = 0.949\n",
            "Epoch 550000: loss = 0.008349590427501268 | acc = 0.9523333333333334\n",
            "Epoch 600000: loss = 0.007792329586925702 | acc = 0.9536666666666667\n",
            "Epoch 650000: loss = 0.007271030165214859 | acc = 0.9583333333333334\n",
            "Epoch 700000: loss = 0.006844443600975869 | acc = 0.961\n",
            "Epoch 750000: loss = 0.006430245012087471 | acc = 0.9643333333333334\n",
            "Epoch 800000: loss = 0.006073784984525406 | acc = 0.965\n",
            "Epoch 850000: loss = 0.005771848457778717 | acc = 0.9656666666666667\n",
            "Epoch 900000: loss = 0.005513645323532859 | acc = 0.9666666666666667\n",
            "Epoch 950000: loss = 0.005288171047225709 | acc = 0.967\n",
            "Seed Number 4\n",
            "Epoch 0: loss = 0.2860193049231569 | acc = 0.09866666666666667\n",
            "Epoch 50000: loss = 0.05838849707288639 | acc = 0.5313333333333333\n",
            "Epoch 100000: loss = 0.03923143812107953 | acc = 0.7406666666666667\n",
            "Epoch 150000: loss = 0.030020993690309722 | acc = 0.7946666666666666\n",
            "Epoch 200000: loss = 0.02536762856951884 | acc = 0.8283333333333334\n",
            "Epoch 250000: loss = 0.019482510804107428 | acc = 0.89\n",
            "Epoch 300000: loss = 0.01610007401172009 | acc = 0.911\n",
            "Epoch 350000: loss = 0.013824306955816972 | acc = 0.9233333333333333\n",
            "Epoch 400000: loss = 0.012163721833335313 | acc = 0.935\n",
            "Epoch 450000: loss = 0.010930352212542637 | acc = 0.9416666666666667\n",
            "Epoch 500000: loss = 0.009933814128575266 | acc = 0.945\n",
            "Epoch 550000: loss = 0.009093801674892984 | acc = 0.9503333333333334\n",
            "Epoch 600000: loss = 0.008426824580298914 | acc = 0.9523333333333334\n",
            "Epoch 650000: loss = 0.007861137528810958 | acc = 0.954\n",
            "Epoch 700000: loss = 0.007373953427246643 | acc = 0.954\n",
            "Epoch 750000: loss = 0.00700193542323984 | acc = 0.956\n",
            "Epoch 800000: loss = 0.006655659790222093 | acc = 0.957\n",
            "Epoch 850000: loss = 0.006342847739919222 | acc = 0.959\n",
            "Epoch 900000: loss = 0.006053658347389956 | acc = 0.9613333333333334\n",
            "Epoch 950000: loss = 0.005778408783139669 | acc = 0.9623333333333334\n",
            "Seed Number 5\n",
            "Epoch 0: loss = 0.3581552031915671 | acc = 0.108\n",
            "Epoch 50000: loss = 0.043786954604339096 | acc = 0.733\n",
            "Epoch 100000: loss = 0.02971860572980492 | acc = 0.8246666666666667\n",
            "Epoch 150000: loss = 0.023367536805562146 | acc = 0.8606666666666667\n",
            "Epoch 200000: loss = 0.019646823882411887 | acc = 0.8833333333333333\n",
            "Epoch 250000: loss = 0.016963238306386196 | acc = 0.8996666666666666\n",
            "Epoch 300000: loss = 0.015207689868012542 | acc = 0.9103333333333333\n",
            "Epoch 350000: loss = 0.013754389914356803 | acc = 0.917\n",
            "Epoch 400000: loss = 0.012569484787305426 | acc = 0.9263333333333333\n",
            "Epoch 450000: loss = 0.01153543741578345 | acc = 0.9313333333333333\n",
            "Epoch 500000: loss = 0.010578940780102066 | acc = 0.9356666666666666\n",
            "Epoch 550000: loss = 0.00982175468269791 | acc = 0.94\n",
            "Epoch 600000: loss = 0.009295227192417713 | acc = 0.9423333333333334\n",
            "Epoch 650000: loss = 0.008747658825302628 | acc = 0.9453333333333334\n",
            "Epoch 700000: loss = 0.008319222840500995 | acc = 0.9466666666666667\n",
            "Epoch 750000: loss = 0.007916096532128991 | acc = 0.9506666666666667\n",
            "Epoch 800000: loss = 0.0075717094124754195 | acc = 0.952\n",
            "Epoch 850000: loss = 0.007248204657048517 | acc = 0.954\n",
            "Epoch 900000: loss = 0.006955119732347765 | acc = 0.956\n",
            "Epoch 950000: loss = 0.006712732771918276 | acc = 0.956\n",
            "Seed Number 6\n",
            "Epoch 0: loss = 0.32008994575587674 | acc = 0.12133333333333333\n",
            "Epoch 50000: loss = 0.05238375698423768 | acc = 0.638\n",
            "Epoch 100000: loss = 0.029365286511843336 | acc = 0.8263333333333334\n",
            "Epoch 150000: loss = 0.022618565536325012 | acc = 0.8683333333333333\n",
            "Epoch 200000: loss = 0.018745321466511974 | acc = 0.895\n",
            "Epoch 250000: loss = 0.01601653913496437 | acc = 0.912\n",
            "Epoch 300000: loss = 0.014063568464141916 | acc = 0.9233333333333333\n",
            "Epoch 350000: loss = 0.01257545076801988 | acc = 0.9296666666666666\n",
            "Epoch 400000: loss = 0.011320473834773272 | acc = 0.937\n",
            "Epoch 450000: loss = 0.010411631934547028 | acc = 0.9416666666666667\n",
            "Epoch 500000: loss = 0.009625340431797256 | acc = 0.947\n",
            "Epoch 550000: loss = 0.008954847295636528 | acc = 0.9503333333333334\n",
            "Epoch 600000: loss = 0.008304233802663012 | acc = 0.953\n",
            "Epoch 650000: loss = 0.007844626396357565 | acc = 0.9563333333333334\n",
            "Epoch 700000: loss = 0.007397786105244892 | acc = 0.957\n",
            "Epoch 750000: loss = 0.006995418210201275 | acc = 0.9576666666666667\n",
            "Epoch 800000: loss = 0.006621998155413712 | acc = 0.9593333333333334\n",
            "Epoch 850000: loss = 0.006258820259275495 | acc = 0.9613333333333334\n",
            "Epoch 900000: loss = 0.0059829171256521535 | acc = 0.9626666666666667\n",
            "Epoch 950000: loss = 0.005731027178851324 | acc = 0.964\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-aa65396f7324>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m31\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Seed Number {i}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m   \u001b[0mseed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseeds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-22-aa65396f7324>\u001b[0m in \u001b[0;36mseeds\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m     ])\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m   \u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mcompute_accuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-6c48fc723187>\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, train_x, train_y, iters, lr)\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_train_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mit\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0miters\u001b[0m \u001b[0;34m//\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-6c48fc723187>\u001b[0m in \u001b[0;36m_train_step\u001b[0;34m(self, train_x, train_y, lr)\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-19-6c48fc723187>\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     38\u001b[0m     \u001b[0mgrad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreversed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m       \u001b[0mgrad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPJ5W/WCfKvJXdjJpEQvoQ0",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}